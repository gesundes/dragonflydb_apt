name: Update APT Repository

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: "0 6 * * *"
  workflow_dispatch:
    # Allow manual triggering

jobs:
  update-apt-repo:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup GPG for package signing
        run: |
          # Import GPG private key for signing packages
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --sign-key ${{ secrets.GPG_KEY_ID }}

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev apt-utils gnupg2 curl jq

      - name: Create apt repository structure
        run: |
          mkdir -p apt-repo/{dists/stable/main/binary-amd64,pool/main}
          mkdir -p apt-repo/dists/stable/main/source

      - name: Fetch latest DragonflyDB releases
        id: fetch-releases
        run: |
          # Get all releases from GitHub API (non-draft, non-prerelease)
          releases_json=$(curl -s "https://api.github.com/repos/dragonflydb/dragonfly/releases")

          # Create downloads directory
          mkdir -p downloads
          mkdir -p apt-repo/pool/main

          # Track downloaded packages
          downloaded_packages=""

          # For each release asset that matches an amd64 deb, download it and rename
          # using the release tag (strip leading 'v' if present) to avoid filename collisions.
          #
          # We output lines: <tag> <url> <orig_name>
          echo "$releases_json" | jq -r '
            .[]
            | select(.draft == false and .prerelease == false)
            | .tag_name as $tag
            | .assets[]
            | select(.name | test(".*amd64.*\\.deb$"))
            | "\($tag) \(.browser_download_url) \(.name)"
          ' | while read -r tag url orig_name; do
            # Normalize tag to a version string (remove leading "v" if present)
            version=$(echo "$tag" | sed "s/^v//")
            # Generate a new unique filename by inserting the version.
            # If origin name already includes the version, this preserves it.
            # Common source name is dragonfly_amd64.deb -> produce dragonfly_<version>_amd64.deb
            new_name=$(echo "$orig_name" | sed -E "s/^(dragonfly)(_.*)?(_amd64\\.deb)$/\\1_${version}_amd64.deb/; t; s/\\.deb$/_${version}.deb/")

            # Fallback: if sed didn't transform (unexpected name), append version before .deb
            if [ "$new_name" = "$orig_name" ]; then
              new_name="${orig_name%.deb}_${version}.deb"
            fi

            dest_path="apt-repo/pool/main/$new_name"

            if [ ! -f "$dest_path" ]; then
              echo "Downloading $orig_name (release: $tag) -> $new_name"
              # Download to a temporary filename to avoid collisions
              tmpfile="downloads/${version}_tmp.deb"
              curl -L -f -o "$tmpfile" "$url"
              # Simple sanity check: file exists and non-empty
              if [ -s "$tmpfile" ]; then
                mv "$tmpfile" "$dest_path"
                downloaded_packages="$downloaded_packages $new_name"
              else
                echo "Download failed or empty for $url"
                rm -f "$tmpfile"
              fi
            else
              echo "Package $new_name already exists, skipping..."
            fi
          done

          # Save downloaded packages list for next step
          echo "downloaded_packages=$downloaded_packages" >> $GITHUB_OUTPUT

      - name: Generate Packages file
        run: |
          cd apt-repo

          # Generate Packages file with apt-ftparchive (ensures proper fields)
          apt-ftparchive packages pool/main > dists/stable/main/binary-amd64/Packages

          # Compress Packages file
          gzip -9fk dists/stable/main/binary-amd64/Packages

      - name: Generate Release file
        run: |
          # Use apt-ftparchive to generate Release with proper checksums and sizes
          cd apt-repo

          # Ensure Packages and Packages.gz exist (idempotent)
          apt-ftparchive packages pool/main > dists/stable/main/binary-amd64/Packages
          gzip -9fk dists/stable/main/binary-amd64/Packages

          apt-ftparchive \
            -o APT::FTPArchive::Release::Origin="DragonflyDB APT Repository" \
            -o APT::FTPArchive::Release::Label="dragonflydb" \
            -o APT::FTPArchive::Release::Suite="stable" \
            -o APT::FTPArchive::Release::Codename="stable" \
            -o APT::FTPArchive::Release::Architectures="amd64" \
            -o APT::FTPArchive::Release::Components="main" \
            -o APT::FTPArchive::Release::Description="DragonflyDB APT Repository - Unofficial mirror" \
            -o APT::FTPArchive::Release::Acquire-By-Hash="yes" \
            -o APT::FTPArchive::Release::Valid-Until="$(date -Ru -d '+30 days')" \
            release dists/stable > dists/stable/Release

      - name: Sign Release file
        run: |
          cd apt-repo/dists/stable

          # Sign Release file
          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --digest-algo SHA512 \
              --default-key ${{ secrets.GPG_KEY_ID }} \
              --armor --detach-sign --output Release.gpg Release

          # Create InRelease file (clearsigned)
          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --digest-algo SHA512 \
              --default-key ${{ secrets.GPG_KEY_ID }} \
              --armor --clearsign --output InRelease Release

      - name: Export public GPG key
        run: |
          # Export public key for users to import
          gpg --armor --export ${{ secrets.GPG_KEY_ID }} > apt-repo/pubkey.gpg

      - name: Create repository index page
        run: |
          cat > apt-repo/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>DragonflyDB APT Repository</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .code { background-color: #f4f4f4; padding: 10px; border-radius: 5px; font-family: monospace; }
                  .warning { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; border-radius: 5px; margin: 20px 0; }
              </style>
          </head>
          <body>
              <h1>DragonflyDB APT Repository</h1>
              <div class="warning">
                  <strong>⚠️ Unofficial Repository:</strong> This is an unofficial mirror of DragonflyDB packages.
                  For official packages, visit <a href="https://github.com/dragonflydb/dragonfly/releases">DragonflyDB Releases</a>.
              </div>

              <h2>Quick Setup</h2>
              <p>Add this repository to your system:</p>
              <div class="code">
          # Add GPG key (install into apt keyrings)<br>
          sudo install -d -m 0755 /etc/apt/keyrings<br>
          curl -fsSL https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pubkey.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/dragonflydb.gpg<br>
          sudo chmod 0644 /etc/apt/keyrings/dragonflydb.gpg<br><br>

          # Add repository (use signed-by via keyring)<br>
          echo "deb [signed-by=/etc/apt/keyrings/dragonflydb.gpg] https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }} stable main" | sudo tee /etc/apt/sources.list.d/dragonflydb.list >/dev/null<br><br>

          # Recommend enabling By-Hash for stronger metadata integrity<br>
          echo 'Acquire::By-Hash "true";' | sudo tee /etc/apt/apt.conf.d/99-by-hash >/dev/null<br><br>
          # Update package list<br>
          sudo apt update<br><br>

          # Install DragonflyDB<br>
          sudo apt install dragonfly
              </div>

              <h2>Available Packages</h2>
              <ul>
          EOF

          # List all deb packages
          find apt-repo/pool/main -name "*.deb" -printf '<li><a href="pool/main/%f">%f</a></li>\n' >> apt-repo/index.html

          cat >> apt-repo/index.html << 'EOF'
              </ul>

              <h2>Repository Information</h2>
              <ul>
                  <li><strong>Repository URL:</strong> https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}</li>
                  <li><strong>Distribution:</strong> stable</li>
                  <li><strong>Component:</strong> main</li>
                  <li><strong>Architecture:</strong> amd64</li>
                  <li><strong>GPG Key:</strong> <a href="pubkey.gpg">Download</a></li>
              </ul>

              <p><small>Last updated: $(date)</small></p>
              <p><small>Source: <a href="https://github.com/${{ github.repository }}">GitHub Repository</a></small></p>
          </body>
          </html>
          EOF

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add apt-repo/
          git commit -m "Update APT repository - $(date)"
          git push

      - name: Setup Pages
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./apt-repo"

      - name: Deploy to GitHub Pages
        if: steps.check-changes.outputs.has_changes == 'true'
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Summary
        run: |
          echo "## APT Repository Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "Repository URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check-changes.outputs.has_changes }}" == "true" ]; then
            echo "✅ Repository updated successfully" >> $GITHUB_STEP_SUMMARY
            echo "### New packages added:" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ steps.fetch-releases.outputs.downloaded_packages }}" ]; then
              echo "${{ steps.fetch-releases.outputs.downloaded_packages }}" | tr ' ' '\n' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            else
              echo "- No new packages" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ No updates needed - repository is up to date" >> $GITHUB_STEP_SUMMARY
          fi
